local ua = require("opcua.api")
local dio = _ENV.app.io

return {
  -- Application name
  applicationName="RealTimeLogic OPCUA",

  -- Application URI should be equal to
  -- URI subject alternative name extention in the certificate
  applicationUri="realtimelogic.com",

  -- endpoint URL will be sent to clients.
  endpointUrl = "opc.tcp://localhost:4841",


  -- The port will server be listen to
  -- optional. Will be taken from endpointUrl if absent.
  listenPort = 4841,

  -- The host name will server be bind to
  -- optional. Will be taken from endpointUrl if absent.
  listenAddress="localhost",

  -- Size of buffer is allocated for one chunk.
  -- Minimum size 8192.
  bufSize = 16386,

  securePolicies = {
     -- Secure policy "None" provides no security at all.
     -- if you need some security then remove this element from array
     { -- #1
       securityPolicyUri = ua.Types.SecurityPolicy.None,
     },

     -- secure policy Basic128Rsa15 can have key length 1024 or 2048 bits length
     -- deprecated in the OPC-UA standard.
     { -- #2
       securityPolicyUri = ua.Types.SecurityPolicy.Basic128Rsa15,
       securityMode = {
         ua.Types.MessageSecurityMode.Sign,
         ua.Types.MessageSecurityMode.SignAndEncrypt,
       },
       certificate = dio:realpath(".basic128rsa15_server.pem"),
       key =         dio:realpath(".basic128rsa15_server.key"),
     }
  },

  logging = {
     socket = {
       dbgOn = false,  -- debug logs of socket
       infOn = false,  -- information logs about sockets
       errOn = true,  -- Errors on sockets
     },
     binary = {
       dbgOn = false,  -- Debugging traces about binary protocol. Print encoded message hex data.
       infOn = false,  -- Information traces about binary protocol
       errOn = true,  -- Errors in binary protocol
     },
     services = {
       dbgOn = false,  -- Debugging traces about UA services work
       infOn = false,  -- Informations traces
       errOn = true,  -- Errors
     }
  }
}

